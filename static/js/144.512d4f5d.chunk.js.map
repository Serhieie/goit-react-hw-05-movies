{"version":3,"file":"static/js/144.512d4f5d.chunk.js","mappings":"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","sources":["constants/constants.js","helpers/toasts.js","pages/Movies/MoviesList.jsx","pages/Movies/MoviesText.jsx","pages/Movies/Movies.jsx"],"sourcesContent":["const BASE_URL = 'https://api.themoviedb.org/3/';\nconst API_KEY = 'api_key=713cb35a39a71866f61c58ef1cecbe50';\nconst options = {\n  method: 'GET',\n  params: {\n    language: 'en-US',\n    page: '1',\n    include_adult: false,\n    per_page: '20',\n  },\n  headers: { accept: 'application/json' },\n};\nexport { BASE_URL, API_KEY, options };\n","import { toast } from 'react-toastify';\n\nimport 'react-toastify/dist/ReactToastify.css';\n\nexport const errorToast = () => {\n  toast.error('Sorry but this element is not full', {\n    position: 'top-right',\n    autoClose: 3000,\n    hideProgressBar: false,\n    closeOnClick: true,\n    pauseOnHover: true,\n    draggable: true,\n    progress: undefined,\n    theme: 'colored',\n  });\n};\n","import { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { useLocation } from 'react-router-dom';\n\nexport default function MovieList({ visibleMovies }) {\n  const location = useLocation();\n  return (\n    <ul className=\"grid md:grid-cols-2 sm2:grid-cols-4 grid-cols-5 w-11/12 mx-auto gap-3 min-h-[450px] h-full\">\n      {visibleMovies\n        .filter(movie => movie.poster_path)\n        .map(movie => (\n          <li\n            key={movie.id}\n            className=\"transition-all duration-300 hover:scale-105\"\n          >\n            <Link\n              className=\"flex flex-col gap-1\"\n              to={`/movies/${movie.id}`}\n              state={{ from: location }}\n            >\n              <img\n                loading=\"lazy\"\n                className=\"rounded-sm overflow-hidden object-cover lg:max-h-[190px] max-h-[320px] md:max-h-[300px]\"\n                src={`https://image.tmdb.org/t/p/original/${movie.poster_path}`}\n                alt={movie.title ?? movie.name}\n                width={250}\n              />\n              <h3 className=\"text-xs md:text-base\">\n                {movie.title ?? movie.name}\n              </h3>\n            </Link>\n          </li>\n        ))}\n    </ul>\n  );\n}\n\nMovieList.propTypes = {\n  visibleMovies: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string,\n      id: PropTypes.number.isRequired,\n      overview: PropTypes.string.isRequired,\n      poster_path: PropTypes.string,\n      release_date: PropTypes.string.isRequired,\n      title: PropTypes.string,\n      vote_average: PropTypes.number.isRequired,\n    })\n  ).isRequired,\n};\n","import PropTypes from 'prop-types';\nexport default function MoviesText({ movieId }) {\n  return (\n    <>\n      {!movieId && (\n        <div className=\"transform -skew-y-6 w-10/12\">\n          <p\n            className=\"text-[200px] text-blue-100 text-center font-h1Font leading-[0.65]\n          md:text-[100px] md:mt-12 sm2:text-[160px]\"\n          >\n            Enjoy{' '}\n            <span className=\"bg-gradient-to-r from-blue-200 to-blue-800 text-transparent bg-clip-text z-100\">\n              your\n            </span>{' '}\n            choise\n          </p>\n        </div>\n      )}\n    </>\n  );\n}\n\nMoviesText.propTypes = {\n  movieId: PropTypes.string.isRequired,\n};\n","import { useState, useEffect, useMemo } from 'react';\nimport axios from 'axios';\nimport { useLocation, useSearchParams } from 'react-router-dom';\nimport { API_KEY, BASE_URL, options } from 'constants/constants';\nimport { errorToast } from 'helpers/toasts';\nimport { debounce } from 'lodash';\nimport MovieList from './MoviesList';\nimport MovieText from './MoviesText';\n\nexport default function Movies() {\n  const [movies, setMovies] = useState([]);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const location = useLocation();\n  // const backLinkLocation = useRef(location.state?.from ?? '/');\n  const movieId = searchParams.get('movieId') || '';\n\n  useEffect(() => {\n    if (!movieId) return;\n    const fetchData = async () => {\n      try {\n        const response = await axios.get(\n          `${BASE_URL}search/movie?query=${movieId}&${API_KEY}`,\n          options\n        );\n        setMovies(response.data.results);\n      } catch (error) {\n        errorToast();\n      }\n    };\n    const delayedQuery = debounce(fetchData, 300);\n    delayedQuery();\n    return () => delayedQuery.cancel();\n  }, [movieId]);\n\n  const updateQueryString = evt => {\n    const movieIdValue = evt.target.value;\n    setSearchParams({ movieId: movieIdValue });\n  };\n\n  const visibleMovies = useMemo(() => {\n    return movies.filter(movie =>\n      movie.title.toLowerCase().includes(movieId.toLowerCase())\n    );\n  }, [movies, movieId]);\n\n  return (\n    <section className=\"mx-auto mt-28 flex justify-center items-center flex-col bg-gradient-to-t via-blue-950 from-black to-black\">\n      <h2 className=\"font-h1Font text-4xl mb-2 text-blue-100 md:text-2xl\">\n        Find your Movie\n      </h2>\n      <input\n        className=\"bg-blue-200 px-6 py-2 text-blue-900 md:mb-6 mb-16 w-full max-w-[400px] placeholder:text-blue-900\n        placeholder:opacity-60 placeholder:font-thin outline-none rounded-sm text-xl md:max-w-[260px]\"\n        type=\"text\"\n        placeholder=\"Enter movie title\"\n        value={movieId}\n        onChange={updateQueryString}\n      />\n      <MovieText movieId={movieId} />\n      <MovieList visibleMovies={visibleMovies} location={location} />\n    </section>\n  );\n}\n"],"names":["BASE_URL","API_KEY","options","method","params","language","page","include_adult","per_page","headers","accept","errorToast","toast","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","theme","MovieList","_ref","visibleMovies","location","useLocation","_jsx","className","children","filter","movie","poster_path","map","_movie$title","_movie$title2","_jsxs","Link","to","concat","id","state","from","loading","src","alt","title","name","width","MoviesText","movieId","_Fragment","Movies","movies","setMovies","useState","searchParams","setSearchParams","useSearchParams","get","useEffect","delayedQuery","debounce","async","response","axios","data","results","error","cancel","useMemo","toLowerCase","includes","type","placeholder","value","onChange","evt","movieIdValue","target","MovieText"],"sourceRoot":""}